/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/lclKerf5NHy
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Textarea } from "@/components/ui/textarea"

export function Comments() {
  const [comments, setComments] = useState([
    {
      id: 1,
      name: "John Doe",
      email: "john@example.com",
      comment: "Great article! I really enjoyed reading it.",
      timestamp: "2023-06-01T12:34:56Z",
      status: "pending",
    },
    {
      id: 2,
      name: "Jane Smith",
      email: "jane@example.com",
      comment: "Interesting perspective. I have a few thoughts to share.",
      timestamp: "2023-06-02T09:15:00Z",
      status: "approved",
    },
    {
      id: 3,
      name: "Bob Johnson",
      email: "bob@example.com",
      comment: "I disagree with some of the points made in the article.",
      timestamp: "2023-06-03T16:20:30Z",
      status: "deleted",
    },
    {
      id: 4,
      name: "Sarah Lee",
      email: "sarah@example.com",
      comment: "This was a great read. Looking forward to more content like this.",
      timestamp: "2023-06-04T08:45:15Z",
      status: "approved",
    },
    {
      id: 5,
      name: "Michael Brown",
      email: "michael@example.com",
      comment: "I have a question about the topic discussed in the article.",
      timestamp: "2023-06-05T14:10:00Z",
      status: "pending",
    },
  ])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterStatus, setFilterStatus] = useState("all")
  const filteredComments = useMemo(() => {
    return comments.filter((comment) => {
      const searchMatch =
        comment.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        comment.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        comment.comment.toLowerCase().includes(searchTerm.toLowerCase())
      if (filterStatus === "all") {
        return searchMatch
      } else {
        return searchMatch && comment.status === filterStatus
      }
    })
  }, [comments, searchTerm, filterStatus])
  const handleApprove = (commentId:number) => {
    setComments((prevComments) =>
      prevComments.map((comment) => (comment.id === commentId ? { ...comment, status: "approved" } : comment)),
    )
  }
  const handleDelete = (commentId:number) => {
    setComments((prevComments) =>
      prevComments.map((comment) => (comment.id === commentId ? { ...comment, status: "deleted" } : comment)),
    )
  }
  const handleReply = (commentId:number, reply:string) => {
    console.log(`Replying to comment ${commentId} with: ${reply}`)
  }
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Comments Management</h1>
        <div className="flex items-center gap-4">
          <div className="relative">
            <SearchIcon className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground" />
            <Input
              type="text"
              placeholder="Search comments..."
              className="pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline">
                <span className="mr-2">Filter by</span>
                <ChevronDownIcon className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuRadioGroup value={filterStatus} onValueChange={setFilterStatus}>
                <DropdownMenuRadioItem value="all">All</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="pending">Pending</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="approved">Approved</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="deleted">Deleted</DropdownMenuRadioItem>
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="space-y-4">
        {filteredComments.map((comment) => (
          <Card key={comment.id} className="p-4">
            <div className="flex items-start justify-between">
              <div className="flex items-start gap-4">
                <Avatar className="h-10 w-10">
                  <AvatarImage src="/placeholder-user.jpg" />
                  <AvatarFallback>{comment.name.charAt(0).toUpperCase()}</AvatarFallback>
                </Avatar>
                <div className="space-y-1">
                  <div className="flex items-center gap-2">
                    <h3 className="font-medium">{comment.name}</h3>
                    <span className="text-sm text-muted-foreground">{comment.email}</span>
                  </div>
                  <p className="text-muted-foreground">{comment.comment}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <time className="text-sm text-muted-foreground">{new Date(comment.timestamp).toLocaleString()}</time>
                {comment.status === "pending" && (
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" onClick={() => handleApprove(comment.id)}>
                      Approve
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDelete(comment.id)}>
                      Delete
                    </Button>
                  </div>
                )}
                {comment.status === "approved" && (
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" onClick={() => handleDelete(comment.id)}>
                      Delete
                    </Button>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="outline" size="sm">
                          Reply
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <Textarea
                          placeholder="Enter your reply..."
                          className="mb-2"
                          
                        />
                        <Button variant="outline" size="sm" onClick={() => handleReply(comment.id, "")}>
                          Cancel
                        </Button>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                )}
                {comment.status === "deleted" && <span className="text-sm text-muted-foreground">Deleted</span>}
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  )
}

function ChevronDownIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  )
}


function SearchIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}
