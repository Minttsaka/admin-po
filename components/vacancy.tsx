/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/V3UGKkgrSL4
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import Link from "next/link"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import ReactQuill from "react-quill";
import { formats, modules } from '@/lib/quillModules';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { addDays, format, parseISO } from "date-fns"
import { DateRange } from "react-day-picker"
import "react-quill/dist/quill.bubble.css";
import { Calendar } from "@/components/ui/calendar"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { useState } from "react"
import { cn } from "@/lib/utils"
import { toast } from "sonner"
import useSWR from "swr"
import { z } from "zod"
import { SubmitHandler, useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import axios from "axios"
import { LocateIcon } from "lucide-react"

type Vacancy = {
  id: string;
  title: string;
  location: string;
  content: string;
  startDate: Date;
  endDate: Date;
  jobType: string;
  company: string;
  address: string;
  createdAt:Date
}

const FormSchema = z.object({
  title: z.string(),
  company:z.string(),
  link:z.string(),
  address:z.string(),
  location:z.string(),
});

type InputType = z.infer<typeof FormSchema>;

const fetcher = async (url:string) => {
  const res = await axios.get(url);
  return res.data;
};

export function Vacancy() {

  const [value, setValue] = useState("");
  const [date, setDate] = useState<DateRange | undefined>()
  const [jobType, setJobType] = useState<string | undefined>()

  const { data, mutate, isLoading } = useSWR<Vacancy[]>(
  `/api/vacancies`,
  fetcher
);
   const {
    register,
    handleSubmit,
    reset,
    control,
    watch,
    formState: { errors,isSubmitting },
  } = useForm<InputType>({
    resolver: zodResolver(FormSchema),
  });

  const startDate = date?.from
  const endDate = date?.to

  const addVacancy : SubmitHandler<InputType> = async (data) => {

    const {
     title,
    company,
    link,
    address,
    location,
    } = data
    
    try {

      await axios.post("/api/vacancies", {
        title,
        company,
        link,
        address,
        content:value,
        location,
        startDate,
        endDate,
        jobType
      });
      mutate();
  
     toast.success("success")

    } catch (error) {
      console.log(error)
    }
  };
  


  return (
    <div className="flex bg-white m-6 p-6 flex-col rounded-3xl">
        <div className="max-w-6xl w-full mx-auto flex items-center gap-4">
          <form className="flex-1">
            <Input placeholder="Search vacancies..." className=" w-full bg-gray-100 rounded-3xl" />
            <Button type="submit" className="sr-only">
              Submit
            </Button>
          </form>
          <Dialog>
            <DialogTrigger asChild>
              <Button className="bg-[#051d05] text-white">Post New Vacancy</Button>
            </DialogTrigger>
            <DialogContent className="bg-white sm:max-w-[600px] h-screen overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Post New Vacancy</DialogTitle>
                <DialogDescription>Fill out the form below to post a new job vacancy.</DialogDescription>
              </DialogHeader>
              <form onSubmit={handleSubmit(addVacancy)} className="grid gap-4 py-4">
                <div className="grid items-center grid-cols-4 gap-4">
                  <Label htmlFor="title" className="text-right">
                    Title
                  </Label>
                  <Input {...register("title")} id="title" placeholder="Software Engineer" className="col-span-3" />
                </div>
                <div className="grid items-center grid-cols-4 gap-4">
                  <Label htmlFor="company" className="text-right">
                    Company
                  </Label>
                  <Input {...register("company")} id="company" placeholder="Acme Inc" className="col-span-3" />
                </div>
                <div className="grid items-center grid-cols-4 gap-4">
                  <Label htmlFor="type" className="text-right">
                    Type
                  </Label>
                  <Select onValueChange={(e)=>setJobType(e)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select job type" />
                    </SelectTrigger>
                    <SelectContent className="bg-white">
                      <SelectItem value="full-time">Full-time</SelectItem>
                      <SelectItem value="part-time">Part-time</SelectItem>
                      <SelectItem value="contract">Contract</SelectItem>
                      <SelectItem value="internship">Internship</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid bg-white items-center grid-cols-4 gap-4">
                  <Label htmlFor="location" className="text-right">
                    Location
                  </Label>
                  <Input {...register("location")} id="location" placeholder="Remote, On-site, Hybrid" className="col-span-3" />
                </div>
                <div className="grid bg-white items-center grid-cols-4 gap-4">
                  <Label htmlFor="address" className="text-right">
                    address
                  </Label>
                  <Input {...register("address")} id="address" placeholder="Remote, On-site, Hybrid" className="col-span-3" />
                </div>
                <div className="grid bg-white items-center grid-cols-4 gap-4">
                  <Label htmlFor="url" className="text-right">
                    Application Link
                  </Label>
                  <Input {...register("link")} id="url" placeholder="Remote, On-site, Hybrid" className="col-span-3" />
                </div>
                <div className="grid items-center grid-cols-1 gap-4">
                  <Label htmlFor="description" className="text-right">
                    Description
                  </Label>
                  <ReactQuill
                    className="h-[60vh] bg-gray-100  mx-2 placeholder:text-2xl outline-none"
                    theme="bubble"
                    modules={modules}
                    formats={formats}
                    value={value}
                    onChange={setValue}
                    placeholder="Describe the vacancy..."
                  />
                </div>
                <div>
                <Label htmlFor="duration" className="text-right">
                    Set duration
                  </Label>
                  <Popover>
                    <PopoverTrigger id="duration" className=" w-full" asChild>
                      <Button
                        id="date"
                        variant={"outline"}
                        className={cn(
                          "w-[300px] justify-start text-left font-normal",
                          !date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {date?.from ? (
                          date.to ? (
                            <>
                              {format(date.from, "LLL dd, y")} -{" "}
                              {format(date.to, "LLL dd, y")}
                            </>
                          ) : (
                            format(date.from, "LLL dd, y")
                          )
                        ) : (
                          <span>Pick a date</span>
                        )}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0 bg-white" align="start">
                      <Calendar
                        initialFocus
                        mode="range"
                        defaultMonth={date?.from}
                        selected={date}
                        onSelect={setDate}
                        numberOfMonths={2}
                        disabled={(date) =>
                          date < new Date() || date < new Date("1900-01-01")
                        }
                        //initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <Button type="submit" className="bg-[#051d05] text-white" disabled={isSubmitting}>Post Vacancy</Button>
              </form>
            </DialogContent>
          </Dialog>
        </div>
        <div className="grid mt-10 gap-6 md:grid-cols-2 lg:grid-cols-3  w-full bg-gray-100 rounded-3xl p-6">
          {isLoading && <p>Loading</p>}
          {data?.map(vacancy=>(
            <Card key={vacancy.id} className="border-none bg-white">
            <CardHeader className="flex flex-row items-center gap-4">
              <BriefcaseIcon className="w-8 h-8" />
              <div className="grid gap-1">
                <CardTitle className="text-[green]">{vacancy.title}</CardTitle>
                <CardDescription>{vacancy.company}</CardDescription>
              </div>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon" className="ml-auto">
                    <MoveHorizontalIcon className="w-4 h-4" />
                    <span className="sr-only">Toggle menu</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="bg-white" align="end">
                  <DropdownMenuItem>View Vacancy</DropdownMenuItem>
                  <DropdownMenuItem>Edit Vacancy</DropdownMenuItem>
                  <DropdownMenuItem>Share Vacancy</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </CardHeader>
            <CardContent className="grid gap-2">
              <div className="text-sm font-semibold">{vacancy.jobType}</div>
              <div className="flex flex-col gap-2 text-sm">
                <div className="flex items-center gap-1">
                  <CalendarIcon className="w-4 h-4" />
                  <span className="text-muted-foreground">posted on {new Date(vacancy.createdAt).toDateString()}</span>
                </div>
                <div className="flex items-center gap-1">
                  <LocateIcon className="w-4 h-4" />
                  <span className="text-muted-foreground">{vacancy.address}</span>
                </div>
              </div>
            </CardContent>
          </Card>
          ))}
          
        </div>
    </div>
  )
}

function BriefcaseIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16" />
      <rect width="20" height="14" x="2" y="6" rx="2" />
    </svg>
  )
}


function CalendarIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  )
}


function FrameIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="22" x2="2" y1="6" y2="6" />
      <line x1="22" x2="2" y1="18" y2="18" />
      <line x1="6" x2="6" y1="2" y2="22" />
      <line x1="18" x2="18" y1="2" y2="22" />
    </svg>
  )
}


function MoveHorizontalIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="18 8 22 12 18 16" />
      <polyline points="6 8 2 12 6 16" />
      <line x1="2" x2="22" y1="12" y2="12" />
    </svg>
  )
}


function UsersIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
      <circle cx="9" cy="7" r="4" />
      <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
      <path d="M16 3.13a4 4 0 0 1 0 7.75" />
    </svg>
  )
}
