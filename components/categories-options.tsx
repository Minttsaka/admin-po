/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/z049uCaifL8
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"


import { Button } from "@/components/ui/button"
import { BookMarked, PilcrowRight, PlusCircle, Save, Settings, User, XCircle } from 'lucide-react'
import React, { useCallback, useRef, useState } from 'react'
import { Input } from './ui/input'
import axios from 'axios';
import useSWR from 'swr';
import { toast } from 'sonner';
import { Category } from '@prisma/client';
import Image from 'next/image';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { cn } from '@/lib/utils';
import { z } from "zod"
import { SubmitHandler, useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"

const FormSchema = z
  .object({
    title: z.string(),
    description:z.string()
  });

  type InputType = z.infer<typeof FormSchema>;

const fetcher = async (url:string) => {
  const res = await axios.get(url);
  return res.data;
};

export function CategoriesOptions() {
  const [activeIndex, setActiveIndex] = useState(0)

  const [open, setOpen]= useState(false)
  const [category, setCategory]= useState('')

  const containerRef = useRef<HTMLDivElement>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<InputType>({
    resolver: zodResolver(FormSchema),
  });

  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const slug = searchParams.get('cat')
  const genderType = searchParams.get('type')

  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set(name, value)
 
      return params.toString()
    },
    [searchParams]
  )

  const addCat: SubmitHandler<InputType> = async (data) => {

    const {title , description} = data
    try {

      await axios.post("/api/categories", {
        title , description
      });
      setOpen(false)
      mutate();
  
     toast.success("success")

    } catch (error) {
      console.log(error)
    }
  };
  

  const { data, mutate, isLoading } = useSWR(
    `/api/categories`,
    fetcher
  );


  const handleOpen = () =>{

    setOpen((prev)=>!prev)
  }


  return (
    <div className="relative rounded-2xl mb-2 max-w-[73vw]">
      {open && 
            <form onSubmit={handleSubmit(addCat)} className='absolute top-0 z-50 flex items-center gap-1 bg-white shadow p-2 rounded ' >
              <div className="flex flex-col gap-1">
                <p className="text-xs bord-b pb-1">Add category</p>
                <Input placeholder="title" type='text' {...register("title")} className='h-6' onChange={(e)=>setCategory(e.target.value)} />
                <Input placeholder="description" {...register("description")} type='text' className='h-6' onChange={(e)=>setCategory(e.target.value)} />
              </div>
              <div className='flex gap-3'>
                <XCircle className='h-3 w-3 text-[red] cursor-pointer' onClick={handleOpen} />
                <Button type="submit">
                  <Save className='h-3 w-3 text-[green] cursor-pointer' />
                </Button>
                
              </div>
            </form>
            }
      <div
        className="flex gap-4 rounded-2xl bg-black text-white p-2 overflow-x-auto  w-full scroll-smooth snap-x snap-mandatory"
      >
        {data?.map((category:Category,index:number) => (
          <Link href={pathname + '/?' + createQueryString('cat',`${category.title}`)}
            key={index}
            className={cn(`snap-center flex justify-between items-center flex-shrink-0 w-[300px] p-4 rounded-lg cursor-pointer ${
              index === activeIndex ? "text-[green]" : "bg-card text-card-foreground"
            }`,{
              'bg-gray-400':category.title===slug})}
          >
            <div className="flex items-center gap-2">
              <Image alt='cat image' src={`${category.img}`} width={50} height={50} className='rounded-2xl ' />
              <div>
                <h3 className="text-lg font-semibold">{category.title}</h3>
                <p className="text-sm text-muted-foreground">{category.description}</p>
              </div>
            </div>
            
          <div className={`${
              index === activeIndex ? "block" : "hidden"
            }`}>
            <h2 className='flex items-center gap-2 cursor-pointer' onClick={handleOpen}>
                <PlusCircle className='h-4 w-4 text-white' />
            </h2>
          </div>
          </Link>
        ))}
      </div>
      
    </div>
  )
}

function ChevronLeftIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m15 18-6-6 6-6" />
    </svg>
  )
}


function ChevronRightIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m9 18 6-6-6-6" />
    </svg>
  )
}
